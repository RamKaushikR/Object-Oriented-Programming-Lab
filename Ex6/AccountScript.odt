
1.Create a class named “Account” which contains name, acct_num, branch, balance, PAN_num. Create functions for deposit and withdrawal. 
a.In deposit function, if the customer deposits money more than 25000, 
then throw the user defined exception “PANRequiredException” and get the 
PAN number and proceed the deposit. 
b.In withdrawal function, if the customer requesting some money, check on 
withdrawal will it satisfy the minimum_bal amount and throw the 
“MinBalRequiredException” exception. If the withdrawal amount is more than the balance amount then throw “NotEnougMoneyInAccountException”. 
c.Search for a particular acct_num. If not present then throw 
“AccountNotFoundException”. 
d.On PAN number entry check the format of 10 characters. First 5 characters 
then 4 numbers and then 1 character. If the format not matched then throw 
“PANFormatMismatchException”. 
e.On account creation if user gives a non branch, then throw “BranchNotFoundException” 

Script started on 2018-09-12 16:41:44+0530
#]0;ram@ram-kaushik: ~/OOP Programs/Ex6##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex6#[00m$ cat Account.java
import java.lang.Character;
import java.util.Scanner;
class PANRequiredException extends Exception
{
    String msg;
    PANRequiredException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}
class MinBalRequiredException extends Exception
{
    String msg;
    MinBalRequiredException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}
class NotEnoughMoneyInAccountException extends Exception
{
    String msg;
    NotEnoughMoneyInAccountException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}


class AccountNotFoundException extends Exception
{
    String msg;
    public AccountNotFoundException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}
class PANFormatMismatchException extends Exception
{
    String msg;
    PANFormatMismatchException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}
class BranchNotFoundException extends Exception
{
    String msg;
    BranchNotFoundException(String m)
    {
	super(m);
	msg=m;
    }
    public String toString()
    {
	return msg;
    }
}
class Accounteg
{
    String name,branch,acct_num;
    double balance;
    Scanner in=new Scanner(System.in);
    String PAN_num=null;
    int getinput()
    {
	System.out.println("Enter account no., name, branch, balance");
	acct_num=in.next();
	name=in.next();
	branch=in.next();
	balance=in.nextDouble();
	try
	{
	    if(!(branch.equals("Chennai")))
		throw new BranchNotFoundException("Branch is not found");
	    return 1;
	}
	catch(BranchNotFoundException e)
	{
	    System.out.println(e);



	    return 0;
	}
    }
    int deposit()
    {
	System.out.println("Enter the amount to be deposited");
	double d=in.nextDouble();
	try
	{
	    if(d>25000.0)
		throw new PANRequiredException("PAN no. is required");
	    else
		balance+=d;
		return 1;
	}
	catch(PANRequiredException e)
	{
	    System.out.println(e);
	}
	try
	{
	    PAN_num=in.next();
	    if(PAN_num.length()!=10)
		throw new PANFormatMismatchException("Incorrect PAN format");
	    int f=1;
	    for(int i=0;i<10;i++)
	    {
		char c=PAN_num.charAt(i);
		if(i<5 || i==9)
		{
		    if(!(Character.isLetter(c)))
		    {
			f=0;
			break;
		    }
		}
		else if(i<9)
		{
		    if(!(Character.isDigit(c)))
		    {
			f=0;
			break;
		    }
		}
		if(f==0)
		    throw new PANFormatMismatchException("Incorrect PAN format");
	    }
	    balance+=d;
	    return 1;
	}
	catch(PANFormatMismatchException e)
	{
	    System.out.println(e);
	    return 0;
	}
    }
    int withdrawal()
    {
	System.out.println("Enter the amount to be withdrawn");
	double w=in.nextDouble();
	try
	{


	    if(w>balance)
		throw new NotEnoughMoneyInAccountException("Insufficient balance");
	    else if(balance-w<2000.0)
		throw new MinBalRequiredException("A lesser amount has to be 			chosen");
	    balance-=w;
	    return 1;
	}
	catch(NotEnoughMoneyInAccountException e)
	{
	    System.out.println(e);
	    return 0;
	}
	catch(MinBalRequiredException e)
	{
	    System.out.println(e);
	    return 0;
	}
    }
    void print()
    {
	System.out.println("Account 	no.:"+acct_num+"\nName:"+name+"\nBranch:"+branch);
	System.out.println("Balance:"+balance);
	if(PAN_num!=null)
	    System.out.println("PAN no.:"+PAN_num);
    }
   void search()
    {
	try
	{
	    System.out.println("Enter account no. to be searched");
	    String a=in.next();
	    if(!(a.equals(acct_num)))
		throw new AccountNotFoundException("Not found");
	    System.out.println("Found");
	}
	catch(AccountNotFoundException e)
	{
	    System.out.println(e);
	}
    }
}
class Account
{
    public static void main(String[] args)
    {
	Scanner in = new Scanner(System.in);
	Accounteg[] a=new Accounteg[3];
	for(int i=0;i<3;i++)
	{
	    a[i]=new Accounteg();
	    int v=a[i].getinput();
	    if(v!=1)
		break;
	    else
	    {
		System.out.println("1.Deposit 2.Withdraw 3.Exit");
		v=in.nextInt();
		if(v==3)
		    continue;
		else if(v==2)


		{
		    v=a[i].withdrawal();
		    if(v==0)
			break;
		}
		else
		{
		    v=a[i].deposit();
		    if(v==0)
			break;
		}
		a[i].search();
	    }
	    a[i].print();
	}
    }
}
#]0;ram@ram-kaushik: ~/OOP Programs/Ex6##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex6#[00m$ java Account
Enter account no., name, branch, balance
100 Ram Chennai 75000
1.Deposit 2.Withdraw 3.Exit
1
Enter the amount to be deposited
26000
PAN no. is required
KLIPO7846O
Enter account no. to be searched
100
Found
Account no.:100
Name:Ram
Branch:Chennai
Balance:101000.0
PAN no.:KLIPO7846O
Enter account no., name, branch, balance
456 Kaushik Chennai 46000
1.Deposit 2.Withdraw 3.Exit
2
Enter the amount to be withdrawn
45000
A lesser amount has to be chosen
#]0;ram@ram-kaushik: ~/OOP Programs/Ex6##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex6#[00m$ java Account
Enter account no., name, branch, balance
789 Ram Chennai 74623
1.Deposit 2.Withdraw 3.Exit
1
Enter the amount to be deposited
30000
PAN no. is required
OLPI9087OI
Incorrect PAN format
#]0;ram@ram-kaushik: ~/OOP Programs/Ex6##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex6#[00m$ exit
exit

Script done on 2018-09-12 16:43:40+0530


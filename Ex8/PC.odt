
2.Write a program to solve the producer consumer problem with bounded buffer solution using multithreading.

Script started on 2018-09-22 18:44:47+0530
#]0;ram@ram-kaushik: ~/OOP Programs/Ex8##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex8#[00m$ cat ProdCons.java
import java.util.*;
class Q{
    int n;
    boolean valueSet = false;
    synchronized public int get(){
	while(!valueSet)
	    try{
		wait();
		Thread.sleep(500);
	    }
	    catch(InterruptedException e){
		System.out.println("interrupted exception");
	    }
	System.out.println("Got: " + n);
	valueSet = false;
	notify();
	return n;
    }
    synchronized public void put(int n){
	while(valueSet)
	    try{
		wait();
		Thread.sleep(500);
	    }
	    catch(InterruptedException e){
		System.out.println("interrupted exception");
	    }
	this.n = n;
	valueSet = true;
	System.out.println("Put: " + n);
	notify();
    }
}
class Producer implements Runnable
{
    Q q;
    Producer(Q q){
	this.q = q;
	new Thread(this, "Producer").start();
    }
    public void run(){
	int i = 0;
	while(true){
	    q.put(i++);
	}
    }
}
class Consumer implements Runnable
{
    Q q;
    Consumer(Q q){
	this.q = q;
	new Thread(this, "Consumer").start();
    }
    public void run(){


	while(true){
	    q.get();
	}
    }
}
class ProdCons
{
    public static void main(String args[]){
	Q q = new Q();
	new Producer(q);
	new Consumer(q);
	System.out.println("Press Control-C to stop.");
    }
}
#]0;ram@ram-kaushik: ~/OOP Programs/Ex8##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex8#[00m$ java ProdCons
Press Control-C to stop.
Put: 0
Got: 0
Put: 1
Got: 1
Put: 2
Got: 2
Put: 3
Got: 3
Put: 4
Got: 4
Put: 5
Got: 5
^C#]0;ram@ram-kaushik: ~/OOP Programs/Ex8##[01;32mram@ram-kaushik#[00m:#[01;34m~/OOP Programs/Ex8#[00m$ exit
exit

Script done on 2018-09-22 18:45:08+0530

